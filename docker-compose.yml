services:
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: miniopassword
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      
  init-permissions:
      image: alpine:latest
      command: ["sh", "-c", "chmod -R 777 /airflow-data"]
      volumes:
        - ./airflow-data:/airflow-data
      user: "0:0"  # Roda como root para garantir permissões
      networks:
        - app-network

  airflow:
    image: apache/airflow:latest
    # user: "${AIRFLOW_UID:-50000}:0"
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__LOGGING_LEVEL=INFO      
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow-data/logs:/opt/airflow/logs
      - ./airflow-data/plugins:/opt/airflow/plugins
      - ./airflow-data/airflow.cfg:/opt/airlfow/airflow.cfg
    depends_on:
      - init-permissions
      - postgres
    command:
      - bash
      - -c
      - airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && airflow webserver & airflow scheduler
    networks:
      - app-network      
  
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Alterado de 5432:5432 para evitar conflito
    networks:
      - app-network

  pgvector:
      image: ankane/pgvector:latest
      ports:
        - "5432:5432"  # Mantém a porta padrão
      environment:
        POSTGRES_USER: pgvector
        POSTGRES_PASSWORD: pgvector
        POSTGRES_DB: vector_db
      volumes:
        - pgvector-data:/var/lib/postgresql/data
      networks:
        - app-network

  metabase:
    image: metabase/metabase:latest
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: airflow
      MB_DB_PASS: airflow
      MB_DB_HOST: postgres
    depends_on:
      - postgres
    volumes:
      - metabase-data:/metabase-data
    networks:
        - app-network      

  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      ports:
        - "8081:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      depends_on:
        - kafka
        - zookeeper
      volumes:
        - kafka-ui-data:/etc/kafkaui      

  jupyter:
      build:
        context: ./jupyter
        dockerfile: Dockerfile
      ports:
        - "8888:8888"
      environment:
        - JUPYTER_ENABLE_LAB=true
        - JUPYTER_TOKEN=mysecrettoken
      volumes:
        - jupyter-data:/home/jovian/work:rw
      depends_on:
        - minio
        - kafka
        - postgres
        - pgvector
      networks:
        - app-network

networks:
  app-network:
    driver: bridge

volumes:
  minio-data:
  kafka-data:
  zookeeper-data:
  postgres-data:
  pgvector-data:
  metabase-data:
  kafka-ui-data:
  jupyter-data:
    name: jupyter-data